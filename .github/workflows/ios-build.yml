name: iOS Build

on:
  push:
    branches: [ios-native-app]
  pull_request:
    branches: [ios-native-app]
  workflow_dispatch:

jobs:
  build:
    name: Build iOS App
    runs-on: macos-14 # Latest macOS with Xcode 15+

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Build for iOS (device, unsigned)
        run: |
          set -o pipefail
          xcodebuild clean build \
            -project iPhoneTestSuite.xcodeproj \
            -scheme iPhoneTestSuite \
            -sdk iphoneos \
            -configuration Release \
            -arch arm64 \
            -derivedDataPath ./DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            2>&1 | tee build.log
          BUILD_EXIT=$?
          echo "Build exit code: $BUILD_EXIT"
          if [ $BUILD_EXIT -ne 0 ]; then
            echo "::error::Build failed with exit code $BUILD_EXIT"
            echo "Errors from build.log:"
            grep -i "error:" build.log | tail -n 20 || echo "No 'error:' lines found"
            exit $BUILD_EXIT
          fi
        continue-on-error: true

      - name: Show compilation errors (summary)
        if: failure()
        run: |
          echo "### ❌ Build failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Last 200 lines of build.log:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 200 build.log >> $GITHUB_STEP_SUMMARY || echo "build.log missing" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Find build artifacts
        run: |
          echo "Build output location:"
          echo "DerivedData structure:"
          find ./DerivedData -type d -maxdepth 4 || echo "No DerivedData found"
          echo ""
          echo "Searching for .app bundles:"
          find ./DerivedData -name "*.app" -type d || echo "No .app bundles found"

      - name: Create IPA for sideloading
        if: success()
        run: |
          # Find the .app bundle (search entire DerivedData tree)
          APP_PATH=$(find ./DerivedData -name "*.app" -type d | head -n 1)

          if [ -n "$APP_PATH" ]; then
            echo "Found app at: $APP_PATH"
            
            # Create Payload directory structure
            mkdir -p Payload
            cp -r "$APP_PATH" Payload/
            
            # Create IPA (it's just a zip file)
            zip -r iPhoneTestSuite.ipa Payload
            
            echo "✅ IPA created: iPhoneTestSuite.ipa"
            ls -lh iPhoneTestSuite.ipa
          else
            echo "❌ No .app bundle found"
            exit 1
          fi

      - name: Upload build artifacts (success)
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: iPhoneTestSuite-IPA
          path: |
            iPhoneTestSuite.ipa
            build.log
          retention-days: 7
          if-no-files-found: warn

      - name: Upload build log (on failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-log
          path: build.log
          retention-days: 7
          if-no-files-found: warn

      - name: Build summary
        if: always()
        run: |
          echo "### iOS Build Complete! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "iPhoneTestSuite.ipa" ]; then
            IPA_SIZE=$(ls -lh iPhoneTestSuite.ipa | awk '{print $5}')
            echo "✅ **IPA Created Successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 **File:** \`iPhoneTestSuite.ipa\` (${IPA_SIZE})" >> $GITHUB_STEP_SUMMARY
            echo "📱 **Target:** iOS Device (unsigned)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📥 How to Install on iPhone:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Free Methods (7-day signing):**" >> $GITHUB_STEP_SUMMARY
            echo "1. **AltStore** (Recommended) - Auto-refresh every 7 days" >> $GITHUB_STEP_SUMMARY
            echo "   - Download: https://altstore.io" >> $GITHUB_STEP_SUMMARY
            echo "   - Install AltServer on computer, then sideload the IPA" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "2. **Sideloadly** - Manual refresh" >> $GITHUB_STEP_SUMMARY
            echo "   - Download: https://sideloadly.io" >> $GITHUB_STEP_SUMMARY
            echo "   - Drag IPA, enter Apple ID, install" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "3. **Xcode** - Best for development" >> $GITHUB_STEP_SUMMARY
            echo "   - Open project, connect iPhone, build & run" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📖 **Full instructions:** See \`INSTALL.md\` in the repository" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This IPA is unsigned. For physical devices:" >> $GITHUB_STEP_SUMMARY
          echo "- Use free Apple ID with AltStore/Sideloadly (7 days)" >> $GITHUB_STEP_SUMMARY
          echo "- Or Apple Developer account for 1-year signing ($99/year)" >> $GITHUB_STEP_SUMMARY
